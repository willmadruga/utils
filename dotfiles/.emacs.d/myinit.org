* Notes!
** How to edit the src below 
*** C-c ' to open source in a separate window editor (for better code formatting)
*** C-c ' to come back h
** TODO: Javascript
*** eslint
*** syntax
*** auto-completion (from other js files)
*** code snippets

* Interface config

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)

  (setq inhibit-startup-message t)

  ;; ido stuff
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  (defalias 'list-buffers 'ibuffer)

  (setq make-backup-file nil) ;; disable backup files
  ;; files backup management
  ;;(setq backup-directory-alist '(("." . "~/.emac.d/saves")))
  ;;(setq backup-by-copying t)
  ;;(setq delete-old-versions t
  ;;      kept-new-versions 3
  ;;      kept-old-versions 1
  ;;      version-control t)

#+END_SRC

* Packages
** try
  #+BEGIN_SRC emacs-lisp
   (use-package try
     :ensure t)
  #+END_SRC

** which-key
 #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
 #+END_SRC

** org-bullets
 #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
 #+END_SRC

** golden-ratio
 #+BEGIN_SRC emacs-lisp
   (use-package golden-ratio
     :ensure t
     :config (golden-ratio-mode))
 #+END_SRC

** ace-window
 #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :ensure t
     :init (global-set-key [remap other-window] 'ace-window))
 #+END_SRC

** Make golden-ratio and ace-window work together
 #+BEGIN_SRC emacs-lisp
   (setq golden-ratio-extra-commands
	 (append golden-ratio-extra-commands
		 '(ace-window)))
 #+END_SRC

** councel
 #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :ensure t)
 #+END_SRC

** ivy
 #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :diminish (ivy-mode)
     :bind (("C-x b" . ivy-switch-buffer))
     :config
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq ivy-display-style 'fancy))
 #+END_SRC

** swiper
 #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind (("C-s" . swiper)
       ("C-c C-r" . ivy-resume)
       ("<f6>" . ivy-resume)
       ("M-x" . counsel-M-x)
       ("C-x C-f" . counsel-find-file)
       ("<f1> f" . counsel-describe-function)
       ("<f1> v" . counsel-describe-variable)
       ("<f1> l" . counsel-find-library)
       ("<f2> i" . counsel-info-lookup-symbol)
       ("<f2> u" . counsel-unicode-char)
       ("C-c g" . counsel-git)
       ("C-c j" . counsel-git-grep)
       ("C-c k" . counsel-ag)
       ("C-x l" . counsel-locate))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (setq enable-recursive-minibuffers t)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
       ))
#+END_SRC

** avy
 #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind ("M-s" . avy-goto-char))
 #+END_SRC

** auto-complete
 #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
     :ensure t
     :init
     (progn
       (ac-config-default)
       (global-auto-complete-mode t)
       ))
 #+END_SRC

** dracula-theme
 #+BEGIN_SRC emacs-lisp
   (use-package dracula-theme
     :ensure t)
 #+END_SRC
** projectile
 #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :bind (("C-c p" . projectile-command-map))
     :config
     (projectile-mode 1))
 #+END_SRC
** flycheck
 #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :config
     (global-flycheck-mode))
 #+END_SRC

