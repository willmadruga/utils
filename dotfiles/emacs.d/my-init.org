#+TITLE: My Emacs configuration
#+AUTHOR: William Madruga
#+PROPERTY: header-args :comments yes :results silent
#+STARTUP: overview

* Init
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000)) ;; make startup faster by reducing garbage collection frequency
#+END_SRC
* UI tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        inhibit-startup-screen t
        initial-scratch-message nil)

  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Packages
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t)
(global-company-mode)
(setq company-idle-delay 0
      company-minimum-prefix-length 3)
(define-key company-mode-map (kbd "C-:") 'helm-company)
(define-key company-active-map (kbd "C-:") 'helm-company)
#+END_SRC


** Define Word
#+BEGIN_SRC emacs-lisp
(use-package define-word
  :ensure t)
#+END_SRC


** Dracula Theme
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :ensure t)
#+END_SRC


** Drag Stuff
#+BEGIN_SRC emacs-lisp
(use-package drag-stuff
  :ensure t
  :bind (("<M-up>" . drag-stuff-up)
   ("<M-down>" . drag-stuff-down)
   ("<M-left>" . drag-stuff-left)
   ("<M-right>" . drag-right-stuff)))
(drag-stuff-global-mode)
#+END_SRC


** Golden Ratio
#+BEGIN_SRC emacs-lisp
(use-package golden-ratio
  :ensure t)
(golden-ratio-mode)
#+END_SRC


** Helm
#+BEGIN_SRC emacs-lisp
  ; Incremental and narrowing framework
  (use-package helm
    :ensure t)

  ; Silver search with helm
  (use-package helm-ag
    :ensure t
    :config (global-set-key (kbd "s-F") 'helm-projectile-ag))

  ; Helm interface for company-mode
  (use-package helm-company
    :ensure t)

  ; Helm interface for projectile
  (use-package helm-projectile
    :ensure t
    :config (helm-projectile-on))
  (global-set-key (kbd "s-P") 'helm-projectile-find-file)
  (setq projectile-completion-system 'helm)

  ; Efficiently hopping squeezed lines
  (use-package helm-swoop
    :ensure t)

  ; Configuration
  (require 'helm-config)
  (helm-mode 1)
  (helm-adaptive-mode 1)
  (helm-projectile-on)
  (helm-autoresize-mode 1)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (set-face-attribute 'helm-selection nil :background "darkblue")
  (setq helm-apropos-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-follow-mode-persistent t)
  (setq helm-M-x-fuzzy-match t)
  (setq helm-move-to-line-cycle-in-source t)
  (setq helm-recentf-fuzzy-match t)
  (setq helm-split-window-inside-p t)

#+END_SRC


** Javascript Support
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :config (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))
(setq js-indent-level 2)
#+END_SRC


** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC


** Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t)
#+END_SRC


** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
  (org-bullets-mode)
#+END_SRC


** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config (progn
     (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
     (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)))
(projectile-global-mode)
#+END_SRC


** Smart Parentheses
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t)
(add-hook 'js-mode-hook #'smartparens-mode)
(add-hook 'emacs-lisp-mode #'smartparens-mode)
#+END_SRC


** Which Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t)
(which-key-mode)
#+END_SRC


** Awesome Tab
#+BEGIN_SRC emacs-lisp
  ;; git clone --depth=1 https://github.com/manateelazycat/awesome-tab.git
  (add-to-list 'load-path (expand-file-name "~/.emacs.d/elisp/awesome-tab/"))
  (require 'awesome-tab)
  (awesome-tab-mode t)
  (awesome-tab-build-helm-source)
  (setq helm-source-list
        '(helm-source-awesome-tab-group))
#+END_SRC


** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t)
(yas-global-mode)
(setq yas-snippets-dirs '("~/.emacs.d/snippets"))
#+END_SRC



* Defaults
#+BEGIN_SRC emacs-lisp
   (setq auto-revert-interval 1            ; Refresh buffers fast
         custom-file (make-temp-file "")   ; Discard customization's
         echo-keystrokes 0.1               ; Show keystrokes asap
         inhibit-startup-message t         ; No splash screen please
         initial-scratch-message nil       ; Clean scratch buffer
         recentf-max-saved-items 100       ; Show more recent files
         ring-bell-function 'ignore        ; Quiet
         sentence-end-double-space nil     ; No double space
         tab-width 2                       ; 2 spaces
         make-backup-files nil             ; stop creating backup~ files
         auto-save-default nil             ; stop creating #autosave# files
         create-lockfiles nil              ; stop creating .# files
     )

   (setq-default frame-title-format "%b (%f)"
                 indent-tabs-mode nil
                 fill-column 140
                 tab-width 2)

  (setq-default prettify-symbols-alist '(("lambda" . ?λ)
                                         ("delta" . ?Δ)
                                         ("gamma" . ?Γ)
                                         ("phi" . ?φ)
                                         ("psi" . ?ψ)))

   (setenv "BROWSER" "firefox")
#+END_SRC


* Standard modes [on/off]
#+BEGIN_SRC emacs-lisp
  ;; Turn-off modes
  (dolist (mode
     '(menu-bar-mode                ; No menu bar
       tool-bar-mode                ; No toolbar
       scroll-bar-mode              ; No scroll bars
       blink-cursor-mode))          ; No blinking cursor
    (funcall mode 0))

  ;; Turn-on modes
  (dolist (mode
     '(abbrev-mode                  ; E.g. sopl -> System.out.println
       column-number-mode           ; Show column number in mode line
       delete-selection-mode        ; Replace selected text
       recentf-mode                 ; Recently opened files
       show-paren-mode              ; Highlight matching parentheses
       ))
    (funcall mode 1))
#+END_SRC


* Utils
#+BEGIN_SRC emacs-lisp
;; Tell me how long is it taking to startup?
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))

;; Loading private functions:
(add-hook
 'after-init-hook
 (lambda ()
   (let ((private-file (concat user-emacs-directory "elisp/private.el")))
     (when (file-exists-p private-file)
       (load-file private-file)))))

(defun duplicate-line ()
  (interactive)
  (let* ((cursor-column (current-column)))
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank)
    (move-to-column cursor-column)))

#+END_SRC


* Keybindings & Hooks
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-a") 'mark-whole-buffer)       ;; select all
(global-set-key (kbd "<C-s-down>") 'duplicate-line)   ;; duplicate line
(add-hook 'prog-mode-hook 'flyspell-prog-mode)        ;; spell check
#+END_SRC


* TODOS
** Install
*** Flyspell
*** JS linting
** Consider installing
*** General.el
*** magit
*** format-all
** Try:
*** More Org-Mode
*** Calendar (org-agenda)
*** org-capture
*** Email

